extends ../layout

block header
    title Place Autocomplete Address Form
    meta(name='viewport', content='initial-scale=1.0, user-scalable=no')
    meta(http-equiv='content-language', content='en-US')
    meta(charset='utf-8')

    style.
        /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
        #map {
            height: 100%;
        }
        .modal-dialog{
            margin-top: 100px;
            max-width: 800px;
        }
        .pac-container, .pac-logo{
            z-index: 2000;
        }
    link(type='text/css', rel='stylesheet', href='https://fonts.googleapis.com/css?family=Roboto:300,400,500')

block content
    h1 Manage Address
    middle= num
    br
    // Modal
    #exampleModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='exampleModalLabel', aria-hidden='true')
        .modal-dialog(role='document')
            .modal-content
                form(role='form', action="/user/address",method="post")
                    .modal-header
                        h5#exampleModalLabel.modal-title New Address
                        input(style="display:none;", name="adrNum")#adrNum
                        input(style="display:none", name="totNum")#totNum
                        button.close(type='button', data-dismiss='modal', aria-label='Close')
                            span(aria-hidden='true') ×

                    .modal-body
                        #locationField.location
                            input#autocomplete(placeholder='Enter your address', type='text')

                            table#address
                                tr
                                    td.label Street
                                    td.slimField
                                        input#street_number.field(placeholder='room & street number', name="StreetNum", disabled='true')
                                    td.wideField(colspan='2')
                                        input#route.field(placeholder='street address', name="StreetAddress", disabled='true')
                                tr
                                    td.label City
                                    td.wideField(colspan='3')
                                        input#locality.field(disabled='true', name='City')
                                tr
                                    td.label State
                                    td.slimField
                                        input#administrative_area_level_1.field(name = "State", disabled='true')
                                    td.label Zip code
                                    td.wideField
                                        input#postal_code.field(name="ZipCode", disabled='true')
                                tr
                                    td.label Country
                                    td.wideField(colspan='3')
                                        input#country.field(name = "Country", disabled='true')
                            h5#preview
                            button.btn(type='button', onclick='displayPreview()') preview

                    .modal-footer
                        button.btn.btn-secondary(type='button', data-dismiss='modal') Close
                        button.btn.btn-primary(type='button', onclick="creCheck()") Submit

    // Modal
    #delModal.modal.fade(tabindex='-1', role='dialog', aria-labelledby='exampleModalLabel', aria-hidden='true')
        .modal-dialog(role='document')
            .modal-content
                .modal-header
                    h5#delModalLabel.modal-title Delete Address
                    input(style="display:none;", name="adrNum")#adrDelNum
                    input(style="display:none", name="totNum")#totDelNum
                    button.close(type='button', data-dismiss='modal', aria-label='Close')
                        span(aria-hidden='true') ×

                .modal-body
                    middle Do you want to delete address #
                    middle#delNum *
                    br
                    middle#delDetail **
                .modal-footer
                    button.btn.btn-secondary(type='button', data-dismiss='modal') Close
                    button.btn.btn-primary(type='button', onclick="delCheck()") Confirm

    table#panel
        tr
            td
                middle Num
            td
                middle Address

    br
    // Button trigger modal
    button.btn.btn-primary(type='button', data-toggle='modal', data-target='#exampleModal', onclick="create()")
        | Add a new address

    script.
        var adrData = !{JSON.stringify(data)};
        $(document).ready(function () {
            var num = !{num};
            console.log(num);
            for (var i = 0; i < num; i++){
                $('#panel').append(display(adrData[i], i + 1));
            }
        });

        //-------------create delete modify----------------
        function create(){
            $('#adrNum').val(0);
            $('#totNum').val(!{num});
        }
        function del(num){
            $('#delNum').text(num);
            $('#delDetail').text( $('#adr' + num).text() );
        }

        function creCheck() {
            $.ajax({
                data: $("form").serialize(),
                url: '/user/submitAddress',
                dataType: 'json',
                type: 'POST',
                cache: false,
                success: function (data) {
                    console.log("finish!!!!!");
                    window.location.href = "/user/address";
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('error ' + textStatus + " " + errorThrown);
                }
            });
            return true;
        }
        function delCheck() {
            console.log(adrData[parseInt($('#delNum').text() - 1)]._id);
            $.ajax({
                data: {ID: adrData[parseInt($('#delNum').text() - 1)]._id},
                url: '/user/deleteAddress',
                dataType: 'json',
                type: 'POST',
                cache: false,
                success: function (data) {
                    console.log("delete");
                    window.location.href = "/user/address";
                },
                error: function (jqXHR, textStatus, errorThrown) {
                    alert('error ' + textStatus + " " + errorThrown);
                }
            });
            return true;
        }
        //-------------End----------------

        function display(adr, disNum) {
            console.log(adr);
            var str = "", data = new Array();
            data[0] = adr.StreetNum;
            data[1] = adr.StreetAddress;
            data[2] = adr.City;
            data[3] = adr.State;
            data[4] = adr.Country;
            for (var i = 0; i <= 4; i++) {
                if (str !== "") str += ",";
                str += data[i];
            }
            str += ' (zip-code: ' + adr.ZipCode + ')';

            return'<tr>' +
                '<td>' + disNum + '</td>' +
                '<td><middle id="adr' + disNum + '" >' + str + '</middle></td>' +
                '<td>' + '<button class="btn btn-danger btn-sm", data-toggle=\'modal\', data-target=\'#delModal\', onclick="del(' + disNum + ')">X</button>' + '</td>' +
                '</tr>';
        }
        function displayPreview() {
            var str = "", data = new Array();
            data[0] = $('#street_number').val();
            data[1] = $('#route').val();
            data[2] = $('#locality').val();
            data[3] = $('#administrative_area_level_1').val();
            data[4] = $('#country').val();
            for (var i = 0; i <= 4; i++) {
                if (str !== "") str += ",";
                str += data[i];
            }
            $('#preview').text(str + ' (zip-code: ' + $('#postal_code').val() + ')');
        }
        //-------------------google auto fill API------------------------------------
        var autocomplete;
        var componentForm = {
            street_number: 'short_name',
            route: 'long_name',
            locality: 'long_name',
            administrative_area_level_1: 'short_name',
            country: 'long_name',
            postal_code: 'short_name'
        }
        function initAutocomplete() {
            // Create the autocomplete object, restricting the search to geographical
            // location types.
            autocomplete = new google.maps.places.Autocomplete(
                /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
                {types: ['geocode']});

            // When the user selects an address from the dropdown, populate the address
            // fields in the form.
            autocomplete.addListener('place_changed', fillInAddress);
        }
        function fillInAddress() {
            // Get the place details from the autocomplete object.
            var place = autocomplete.getPlace();
            for (var component in componentForm) {
                document.getElementById(component).value = '';
                document.getElementById(component).disabled = false;
            }
            // Get each component of the address from the place details
            // and fill the corresponding field on the form.
            for (var i = 0; i < place.address_components.length; i++) {
                var addressType = place.address_components[i].types[0];
                if (componentForm[addressType]) {
                    var val = place.address_components[i][componentForm[addressType]];
                    document.getElementById(addressType).value = val;
                }
            }
        }
        //-------------------End------------------------------------

    script(src='https://maps.googleapis.com/maps/api/js?key=AIzaSyCZRaTYIU7pPCdMEnXZIkXFWu7Pai_ekGg&libraries=places&callback=initAutocomplete', async='', defer='')
